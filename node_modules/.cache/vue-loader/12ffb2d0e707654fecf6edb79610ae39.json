{"remainingRequest":"/Users/songqingyu/Documents/GitHub/sustainKG/node_modules/_vue-loader@15.9.7@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/songqingyu/Documents/GitHub/sustainKG/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!/Users/songqingyu/Documents/GitHub/sustainKG/node_modules/_vue-loader@15.9.7@vue-loader/lib/index.js??vue-loader-options!/Users/songqingyu/Documents/GitHub/sustainKG/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/songqingyu/Documents/GitHub/sustainKG/src/App.vue","mtime":1627141868486},{"path":"/Users/songqingyu/Documents/GitHub/sustainKG/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/songqingyu/Documents/GitHub/sustainKG/node_modules/_vue-loader@15.9.7@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/songqingyu/Documents/GitHub/sustainKG/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/songqingyu/Documents/GitHub/sustainKG/node_modules/_vue-loader@15.9.7@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}