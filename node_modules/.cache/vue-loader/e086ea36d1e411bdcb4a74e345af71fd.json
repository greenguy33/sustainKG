{"remainingRequest":"/Users/songqingyu/Documents/GitHub/sustainKG/node_modules/_vue-loader@15.9.7@vue-loader/lib/index.js??vue-loader-options!/Users/songqingyu/Documents/GitHub/sustainKG/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/Users/songqingyu/Documents/GitHub/sustainKG/src/App.vue","mtime":1627141868486},{"path":"/Users/songqingyu/Documents/GitHub/sustainKG/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/songqingyu/Documents/GitHub/sustainKG/node_modules/_vue-loader@15.9.7@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/songqingyu/Documents/GitHub/sustainKG/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/songqingyu/Documents/GitHub/sustainKG/node_modules/_vue-loader@15.9.7@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKPGRpdiBpZD0iYXBwIj4KICAgIDxlbC1yb3c+CiAgICAgICAgPGVsLWhlYWRlciBzdHlsZT0idGV4dC1hbGlnbjogcmlnaHQ7aGVpZ2h0OiA0MHB4OyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImdyaWQtY29udGVudCAiPgogICAgICAgICAgICAgICAgPHRlbXBsYXRlID4KICAgICAgICAgICAgICAgICAgICA8ZWwtYnV0dG9uIHN0eWxlPSJtYXJnaW4tcmlnaHQ6IDVweDsiICBAY2xpY2s9Im9uVGFwTG9naW4iIHYtc2hvdz0ic2hvd0xvZ2luIiBzaXplPSJzbWFsbCIgcm91bmQ+TG9naW48L2VsLWJ1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8ZWwtYnV0dG9uIHN0eWxlPSJtYXJnaW4tcmlnaHQ6IDVweDsiIHNpemU9InNtYWxsIiB0eXBlPSJzdWNjZXNzIiB2LXNob3c9IiFzaG93TG9naW4iIHJvdW5kPnt7dXNlcm5hbWV9fTwvZWwtYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxlbC1idXR0b24gIEBjbGljaz0ibG9nb3V0IiBzaXplPSJzbWFsbCIgdi1zaG93PSIhc2hvd0xvZ2luIiByb3VuZD5Mb2dvdXQ8L2VsLWJ1dHRvbj4KICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZWwtaGVhZGVyPgoKICAgICAgICA8ZWwtZGlhbG9nCiAgICAgICAgICAgICAgICB0aXRsZT0iTG9naW4iCiAgICAgICAgICAgICAgICA6dmlzaWJsZS5zeW5jPSJjZW50ZXJEaWFsb2dWaXNpYmxlIgogICAgICAgICAgICAgICAgd2lkdGg9IjMwJSIKICAgICAgICAgICAgICAgIGNlbnRlcj4KICAgICAgICAgICAgPHNwYW4+VXNlcm5hbWU8ZWwtaW5wdXQgdi1tb2RlbD0idXNlcm5hbWUiIHBsYWNlaG9sZGVyPSJQbGVhc2UgSW5wdXQgVXNlcm5hbWUiPjwvZWwtaW5wdXQ+PC9zcGFuPgogICAgICAgICAgICA8YnI+PGJyPgogICAgICAgICAgICA8c3Bhbj5QYXNzd29yZDxlbC1pbnB1dCB0eXBlPSJwYXNzd29yZCIgdi1tb2RlbD0icGFzc3dvcmQiIHBsYWNlaG9sZGVyPSJQbGVhc2UgSW5wdXQgUGFzc3dvcmQiPjwvZWwtaW5wdXQ+PC9zcGFuPgogICAgICAgICAgICA8ZWwtYnV0dG9uIHR5cGU9InRleHQiIHN0eWxlPSJtYXJnaW4tdG9wOiAxNXB4OyIgQGNsaWNrLm5hdGl2ZT0iZGlhbG9nX2NyZWF0ZVVzZXI9dHJ1ZTsgY2VudGVyRGlhbG9nVmlzaWJsZT1mYWxzZSI+Tm8gYWNjb3VudD88L2VsLWJ1dHRvbj4KICAgICAgICAgICAgPHNwYW4gc2xvdD0iZm9vdGVyIiBjbGFzcz0iZGlhbG9nLWZvb3RlciI+CiAgICAgICAgPGVsLWJ1dHRvbiBAY2xpY2submF0aXZlPSJjZW50ZXJEaWFsb2dWaXNpYmxlPWZhbHNlIj5DYW5jZWw8L2VsLWJ1dHRvbj4KICAgICAgICA8ZWwtYnV0dG9uIHR5cGU9InByaW1hcnkiIEBjbGljay5uYXRpdmU9ImhhbmRsZVNob3ciID5ZZXM8L2VsLWJ1dHRvbj4KICAgICAgPC9zcGFuPgogICAgICAgIDwvZWwtZGlhbG9nPgoKCiAgICAgICAgPGVsLWRpYWxvZwogICAgICAgICAgICAgICAgdGl0bGU9IkNyZWF0ZSBOZXcgQWNjb3VudCIKICAgICAgICAgICAgICAgIDp2aXNpYmxlLnN5bmM9ImRpYWxvZ19jcmVhdGVVc2VyIgogICAgICAgICAgICAgICAgd2lkdGg9IjMwJSIKICAgICAgICAgICAgICAgIGNlbnRlcj4KICAgICAgICAgICAgPHNwYW4+VXNlcm5hbWU8ZWwtaW5wdXQgdi1tb2RlbD0ibmV3VXNlcm5hbWUiIHBsYWNlaG9sZGVyPSJQbGVhc2UgSW5wdXQgVXNlcm5hbWUiPjwvZWwtaW5wdXQ+PC9zcGFuPgogICAgICAgICAgICA8YnI+PGJyPgogICAgICAgICAgICA8c3Bhbj5QYXNzd29yZDxlbC1pbnB1dCB0eXBlPSJwYXNzd29yZCIgdi1tb2RlbD0ibmV3UGFzc3dvcmQiIHBsYWNlaG9sZGVyPSJQbGVhc2UgSW5wdXQgUGFzc3dvcmQiPjwvZWwtaW5wdXQ+PC9zcGFuPgogICAgICAgICAgICA8c3BhbiBzbG90PSJmb290ZXIiIGNsYXNzPSJkaWFsb2ctZm9vdGVyIj4KICAgICAgICA8ZWwtYnV0dG9uIEBjbGljay5uYXRpdmU9ImRpYWxvZ19jcmVhdGVVc2VyPWZhbHNlIj5DYW5jZWw8L2VsLWJ1dHRvbj4KICAgICAgICA8ZWwtYnV0dG9uIHR5cGU9InByaW1hcnkiIEBjbGljaz0iY3JlYXRlVXNlciIgPlllczwvZWwtYnV0dG9uPgogICAgICA8L3NwYW4+CiAgICAgICAgPC9lbC1kaWFsb2c+CgoKCgoKICAgIDwvZWwtcm93PgoKICAgIDxlbC1jb250YWluZXI+CgogICAgICAgIDxlbC1yb3cgY2xhc3M9InRhYyI+CiAgICAgICAgICAgIDxlbC1jb2wgPgogICAgICAgICAgICAgICAgPGg1PlN1c3RhaW5LRzwvaDU+CiAgICAgICAgICAgICAgICA8ZWwtbWVudQoKICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdC1hY3RpdmU9IjIiCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJlbC1tZW51LXZlcnRpY2FsLWRlbW8iCgogICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDxlbC1zdWJtZW51IGluZGV4PSIxIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Q9InRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLWxvY2F0aW9uIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5PcGVyYXRpb248L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxlbC1tZW51LWl0ZW0tZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tPHRlbXBsYXRlIHNsb3Q9InRpdGxlIj7liIbnu4TkuIA8L3RlbXBsYXRlPi0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVsLW1lbnUtaXRlbSBpbmRleD0iMS0xIiBAY2xpY2s9InN1Ym1pdERhdGEoKSI+U3VibWl0IERhdGE8L2VsLW1lbnUtaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9IjEtMiI+VXBsb2FkIERhdGE8L2VsLW1lbnUtaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbC1tZW51LWl0ZW0gaW5kZXg9IjEtMyIgQGNsaWNrPSJyZWxvYWQoKSI+UmVsb2FkIERhdGE8L2VsLW1lbnUtaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9lbC1tZW51LWl0ZW0tZ3JvdXA+CgoKICAgICAgICAgICAgICAgICAgICA8L2VsLXN1Ym1lbnU+CiAgICAgICAgICAgICAgICAgICAgPGVsLW1lbnUtaXRlbSA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLW1lbnUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc2xvdD0idGl0bGUiPk5vZGUgTnVtYmVy77yae3sgaW5mby5ub2Rlcy5sZW5ndGggfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9lbC1tZW51LWl0ZW0+CiAgICAgICAgICAgICAgICAgICAgPGVsLW1lbnUtaXRlbSA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJlbC1pY29uLXNldHRpbmciPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc2xvdD0idGl0bGUiPkxpbmsgTnVtYmVy77yae3sgaW5mby5saW5rcy5sZW5ndGggfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9lbC1tZW51LWl0ZW0+CiAgICAgICAgICAgICAgICA8L2VsLW1lbnU+CiAgICAgICAgICAgIDwvZWwtY29sPgoKCiAgICAgICAgICAgIDxyb3V0ZXItdmlldz48L3JvdXRlci12aWV3PgoKICAgICAgICA8L2VsLXJvdz4KCgoKICAgICAgICA8ZWwtZGlhbG9nIDp2aXNpYmxlLnN5bmM9ImRpYWxvZ0Zvcm1WaXNpYmxlIgogICAgICAgICAgICAgICAgICAgdGl0bGU9IkNyZWF0ZSBOb2RlIiBjZW50ZXIKICAgICAgICA+CgogICAgICAgICAgICBOb2RlIE5hbWUKICAgICAgICAgICAgPGVsLXNlbGVjdAoKICAgICAgICAgICAgICAgICAgICBAa2V5dXAubmF0aXZlID0gInNob3dPcHRpb24iCiAgICAgICAgICAgICAgICAgICAgbGFiZWwtcG9zaXRpb249InJpZ2h0IgogICAgICAgICAgICAgICAgICAgIGxhYmVsLXdpZHRoPSI4NnB4IgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMzAwcHg7IG1hcmdpbi1sZWZ0OjUwcHg7IgoKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJub2RlX3ZhbHVlIgogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJQbGVhc2Ugc2VsZWN0IgogICAgICAgICAgICAgICAgICAgIGNsZWFyYWJsZQogICAgICAgICAgICAgICAgICAgIGZpbHRlcmFibGUKICAgICAgICAgICAgICAgICAgICBAYmx1cj0ic2hvd09wdGlvbiIKICAgICAgICAgICAgICAgICAgICBAY2xlYXI9InNlbGVjdENsZWFyIgogICAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9InNlbGVjdENoYW5nZSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGRpdiAgdi1zaG93PSJvcHRpb25WaXNpYmxlIj4KICAgICAgICAgICAgICAgIDxlbC1vcHRpb24KCiAgICAgICAgICAgICAgICAgICAgdi1mb3I9IihpdGVtLGluZGV4KSBpbiBub2RlX2xpc3QiCiAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIgogICAgICAgICAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSIgPjwvZWwtb3B0aW9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZWwtc2VsZWN0PgoKICAgICAgICAgICAgPGRpdiBzbG90PSJmb290ZXIiIGNsYXNzPSJkaWFsb2ctZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxlbC1idXR0b24gQGNsaWNrPSJjYW5jZWwiPgogICAgICAgICAgICAgICAgICAgIE5vCiAgICAgICAgICAgICAgICA8L2VsLWJ1dHRvbj4KICAgICAgICAgICAgICAgIDxlbC1idXR0b24gdHlwZT0icHJpbWFyeSIgOmRpc2FibGVkPSJidG5DaGFuZ2VFbmFibGUiIEBjbGljaz0iYWRkTm9kZXMiPgogICAgICAgICAgICAgICAgICAgIFllcwogICAgICAgICAgICAgICAgPC9lbC1idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZWwtZGlhbG9nPgoKCiAgICAgICAgPGVsLWRpYWxvZyA6dmlzaWJsZS5zeW5jPSJkaWFsb2dGb3JtVmlzaWJsZV9jaGFuZ2Vfbm9kZV9uYW1lIgogICAgICAgICAgICAgICAgICAgdGl0bGU9IkNoYW5nZSBOb2RlIE5hbWUiIGNlbnRlcgogICAgICAgID4KCiAgICAgICAgICAgICAgICBOb2RlIE5hbWUKICAgICAgICAgICAgPGVsLXNlbGVjdAogICAgICAgICAgICAgICAgICAgIGxhYmVsLXBvc2l0aW9uPSJyaWdodCIKICAgICAgICAgICAgICAgICAgICBsYWJlbC13aWR0aD0iODZweCIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDMwMHB4OyBtYXJnaW4tbGVmdDozMHB4OyIKCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibmV3X25vZGVfbmFtZSIKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iUGxlYXNlIHNlbGVjdCIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgICBmaWx0ZXJhYmxlCiAgICAgICAgICAgICAgICAgICAgQGJsdXI9InNlbGVjdEJsdXIiCiAgICAgICAgICAgICAgICAgICAgQGNsZWFyPSJzZWxlY3RDbGVhciIKICAgICAgICAgICAgICAgICAgICBAY2hhbmdlPSJzZWxlY3RDaGFuZ2UiCiAgICAgICAgICAgID48ZWwtb3B0aW9uCiAgICAgICAgICAgICAgICAgICAgdi1mb3I9IihpdGVtLGluZGV4KSBpbiBub2RlX2xpc3QiCiAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIgogICAgICAgICAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSIgPjwvZWwtb3B0aW9uPgogICAgICAgICAgICA8L2VsLXNlbGVjdD4KICAgICAgICAgICAgPGRpdiBzbG90PSJmb290ZXIiIGNsYXNzPSJkaWFsb2ctZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxlbC1idXR0b24gQGNsaWNrPSJjYW5jZWwiPgogICAgICAgICAgICAgICAgICAgIE5vCiAgICAgICAgICAgICAgICA8L2VsLWJ1dHRvbj4KICAgICAgICAgICAgICAgIDxlbC1idXR0b24gdHlwZT0icHJpbWFyeSIgOmRpc2FibGVkPSJidG5DaGFuZ2VFbmFibGUiIEBjbGljaz0iY2hhbmdlX25vZGVfbmFtZSI+CiAgICAgICAgICAgICAgICAgICAgWWVzCiAgICAgICAgICAgICAgICA8L2VsLWJ1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9lbC1kaWFsb2c+CgoKCiAgICAgICAgPGVsLWRpYWxvZyA6dmlzaWJsZS5zeW5jPSJkaWFsb2dGb3JtVmlzaWJsZV9saW5rIgoKICAgICAgICAgICAgICAgICAgIHRpdGxlPSJDcmVhdGUgTGluayIgY2VudGVyPgoKICAgICAgICAgICAgTGluayBOYW1lCgogICAgICAgICAgICA8ZWwtc2VsZWN0CiAgICAgICAgICAgICAgICAgICAgbGFiZWwtcG9zaXRpb249InJpZ2h0IgogICAgICAgICAgICAgICAgICAgIGxhYmVsLXdpZHRoPSI4NnB4IgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogMzAwcHg7IG1hcmdpbi1sZWZ0OjUwcHg7IgoKICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPSJsaW5rX3ZhbHVlIgogICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJQbGVhc2Ugc2VsZWN0IgogICAgICAgICAgICAgICAgICAgIGNsZWFyYWJsZQogICAgICAgICAgICAgICAgICAgIGZpbHRlcmFibGUKICAgICAgICAgICAgICAgICAgICBAYmx1cj0ic2VsZWN0Qmx1ciIKICAgICAgICAgICAgICAgICAgICBAY2xlYXI9InNlbGVjdENsZWFyIgogICAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9InNlbGVjdENoYW5nZSIKICAgICAgICAgICAgPjxlbC1vcHRpb24KICAgICAgICAgICAgICAgICAgICB2LWZvcj0iKGl0ZW0saW5kZXgpIGluIGxpbmtfbGlzdCIKICAgICAgICAgICAgICAgICAgICA6a2V5PSJpbmRleCIKICAgICAgICAgICAgICAgICAgICA6bGFiZWw9Iml0ZW0ubGFiZWwiCiAgICAgICAgICAgICAgICAgICAgOnZhbHVlPSJpdGVtLnZhbHVlIiA+PC9lbC1vcHRpb24+CiAgICAgICAgICAgIDwvZWwtc2VsZWN0PgoKCiAgICAgICAgICAgIDxkaXYgc2xvdD0iZm9vdGVyIiBjbGFzcz0iZGlhbG9nLWZvb3RlciI+CiAgICAgICAgICAgICAgICA8ZWwtYnV0dG9uIEBjbGljaz0iY2FuY2VsIj4KICAgICAgICAgICAgICAgICAgICBObwogICAgICAgICAgICAgICAgPC9lbC1idXR0b24+CiAgICAgICAgICAgICAgICA8ZWwtYnV0dG9uIHR5cGU9InByaW1hcnkiIDpkaXNhYmxlZD0iYnRuQ2hhbmdlRW5hYmxlIiAgQGNsaWNrPSJhZGRMaW5rcyI+CiAgICAgICAgICAgICAgICAgICAgWWVzCiAgICAgICAgICAgICAgICA8L2VsLWJ1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9lbC1kaWFsb2c+CgogICAgICAgIDxlbC1kaWFsb2cgOnZpc2libGUuc3luYz0iZGlhbG9nRm9ybVZpc2libGVfY2hhbmdlX2xpbmtfbmFtZSIKICAgICAgICAgICAgICAgICAgIHRpdGxlPSJDaGFuZ2UgTGluayBOYW1lIiBjZW50ZXI+CgogICAgICAgICAgICBMaW5rIE5hbWUKICAgICAgICAgICAgPGVsLXNlbGVjdAogICAgICAgICAgICAgICAgICAgIGxhYmVsLXBvc2l0aW9uPSJyaWdodCIKICAgICAgICAgICAgICAgICAgICBsYWJlbC13aWR0aD0iODZweCIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDMwMHB4OyBtYXJnaW4tbGVmdDozMHB4OyIKCiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD0ibmV3X2xpbmtfbmFtZSIKICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iUGxlYXNlIHNlbGVjdCIKICAgICAgICAgICAgICAgICAgICBjbGVhcmFibGUKICAgICAgICAgICAgICAgICAgICBmaWx0ZXJhYmxlCiAgICAgICAgICAgICAgICAgICAgQGJsdXI9InNlbGVjdEJsdXIiCiAgICAgICAgICAgICAgICAgICAgQGNsZWFyPSJzZWxlY3RDbGVhciIKICAgICAgICAgICAgICAgICAgICBAY2hhbmdlPSJzZWxlY3RDaGFuZ2UiCiAgICAgICAgICAgID48ZWwtb3B0aW9uCiAgICAgICAgICAgICAgICAgICAgdi1mb3I9IihpdGVtLGluZGV4KSBpbiBsaW5rX2xpc3QiCiAgICAgICAgICAgICAgICAgICAgOmtleT0iaW5kZXgiCiAgICAgICAgICAgICAgICAgICAgOmxhYmVsPSJpdGVtLmxhYmVsIgogICAgICAgICAgICAgICAgICAgIDp2YWx1ZT0iaXRlbS52YWx1ZSIgPjwvZWwtb3B0aW9uPgogICAgICAgICAgICA8L2VsLXNlbGVjdD4KICAgICAgICAgICAgPGRpdiBzbG90PSJmb290ZXIiIGNsYXNzPSJkaWFsb2ctZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxlbC1idXR0b24gQGNsaWNrPSJjYW5jZWwiPgogICAgICAgICAgICAgICAgICAgIE5vCiAgICAgICAgICAgICAgICA8L2VsLWJ1dHRvbj4KICAgICAgICAgICAgICAgIDxlbC1idXR0b24gdHlwZT0icHJpbWFyeSIgOmRpc2FibGVkPSJidG5DaGFuZ2VFbmFibGUiIEBjbGljaz0iY2hhbmdlX2xpbmtfbmFtZSI+CiAgICAgICAgICAgICAgICAgICAgWWVzCiAgICAgICAgICAgICAgICA8L2VsLWJ1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9lbC1kaWFsb2c+CgoKICAgICAgICA8ZWwtbWFpbiBpZD0iZ3JhcGgiPgogICAgICAgICAgICA8IS0tPGRpdiBpZD0iZ3JhcGgiPjwvZGl2Pi0tPgogICAgICAgIDwvZWwtbWFpbj4KCgoKCiAgICA8L2VsLWNvbnRhaW5lcj4KCgoKCjwvZGl2PgoK"},null]}